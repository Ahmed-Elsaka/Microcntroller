
7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000144  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000030f  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
		u8 Bit7 :1;
	}BitAccess;
	u8 ByteAccess;
}Register;

void main(void){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* set DDRD output */
	((Register*) 0x31)->ByteAccess = 0xff; // 0x31 = DDRD address
  74:	e1 e3       	ldi	r30, 0x31	; 49
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	80 83       	st	Z, r24
		((Register*) 0x32)->BitAccess.Bit4  = 1;
		((Register*) 0x32)->BitAccess.Bit5  = 1;
		((Register*) 0x32)->BitAccess.Bit6  = 1;
		((Register*) 0x32)->BitAccess.Bit7  = 1;
		*/
		((Register*) 0x32)->ByteAccess  =0xFE;
  7c:	e2 e3       	ldi	r30, 0x32	; 50
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	8e ef       	ldi	r24, 0xFE	; 254
  82:	80 83       	st	Z, r24
		// enable second 7seg = 7;
		((Register*) 0x32)->ByteAccess  =0xFE;
  84:	e2 e3       	ldi	r30, 0x32	; 50
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	8e ef       	ldi	r24, 0xFE	; 254
  8a:	80 83       	st	Z, r24
		//0111 1111 =7f
		((Register*) 0x32)->ByteAccess  =0x7F;
  8c:	e2 e3       	ldi	r30, 0x32	; 50
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f e7       	ldi	r24, 0x7F	; 127
  92:	80 83       	st	Z, r24
  94:	f3 cf       	rjmp	.-26     	; 0x7c <main+0x10>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
